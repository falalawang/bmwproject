<?php
namespace Admin\Controller;
use Think\Controller;
class OrderController extends CommonController{
	//订单列表
	public function index(){
		$model = M();
		$order = $model -> table('xdl_order as o,xdl_user_address as a,xdl_address as c')
						->field('o.id,o.brand,o.series,o.types,o.combo,o.lastPrice,o.vin,o.orderTime,o.orderDate,o.orderStatus,a.name,a.address,a.telephone,c.province,c.city,c.county')
						-> where("o.orderStatus!='0' and o.addressId=a.id and a.cityId=c.id")
						-> order('o.orderStatus asc')
						-> select();
		$count = 1;
		foreach($order as $k=>$v){	
			$arr = explode(',',$v['combo']);

			//车的品牌
			$brand = $v['brand'];
			//车系
			$series = $v['series'];
			//车型
			$types = $v['types'];
			//将查询出的所有套餐放到下标为combo的数组中
			$order[$k]["combo"] = $arr;

			$Ty = M('models');
			$type = $Ty -> field('id')
						-> where("brand='$brand' and series='$series' and types='$types'")
						-> select();
			//获取用户车型对应车型表中的id
			$typeId = $type[0]['id'];
			$num = 0;
			//遍历，查找出套餐对应的价格对应
			foreach($arr as $value){
				$combos = M('combo');
				$combo = $combos -> field('lowPrice,highPrice')
								 -> where("typeId=$typeId and comboName='$value'")
								 -> select();
				//将价格与套餐连接在一起
				foreach($combo as $c){
					if(!empty($c['highPrice'])){
						$order[$k]["combo"][$num] = $value.":".$c['lowPrice'].'-'.$c['highPrice'];
					}else{
						$order[$k]["combo"][$num] = $value.":".$c['lowPrice'];
					}
				}
				
				$num++;
			}
			$order[$k]['count']=$count;			
			$count++;		
		}
		$this -> assign('orders',$order);
		$this -> display();
	}
	//已取消的订单列表
	public function cancel(){
		$model = M();
		$order = $model -> table('xdl_order as o,xdl_user_address as a,xdl_address as c')
						->field('o.id,o.brand,o.series,o.types,o.combo,o.lastPrice,o.vin,o.orderTime,o.orderDate,o.orderStatus,a.name,a.address,a.telephone,c.province,c.city,c.county')
						-> where("o.orderStatus='0' and o.addressId=a.id and a.cityId=c.id")
						-> order('o.orderStatus asc')
						-> select();
		$count = 1;
		foreach($order as $k=>$v){	
			$arr = explode(',',$v['combo']);

			//车的品牌
			$brand = $v['brand'];
			//车系
			$series = $v['series'];
			//车型
			$types = $v['types'];
			//将查询出的所有套餐放到下标为combo的数组中
			$order[$k]["combo"] = $arr;

			$Ty = M('types');
			$type = $Ty -> field('id')
						-> where("brand='$brand' and series='$series' and types='$types'")
						-> select();
			//获取用户车型对应车型表中的id
			$typeId = $type[0]['id'];
			$num = 0;
			//遍历，查找出套餐对应的价格对应
			foreach($arr as $value){
				$combos = M('combo');
				$combo = $combos -> field('lowPrice,highPrice')
								 -> where("typeId=$typeId and comboName='$value'")
								 -> select();
				//将价格与套餐连接在一起
				foreach($combo as $c){
					if(!empty($c['highPrice'])){
						$order[$k]["combo"][$num] = $value.":".$c['lowPrice'].'-'.$c['highPrice'];
					}else{
						$order[$k]["combo"][$num] = $value.":".$c['lowPrice'];
					}
				}
				
				$num++;
			}
			$order[$k]['count']=$count;			
			$count++;		
		}
		$this -> assign('orders',$order);
		$this -> display();
	}
	//编辑订单状态
	public function modStatus(){
		$order = M('order');
		if($order -> create($_POST)){
			if($order -> save()){
				$this -> success('更新成功',U('Order/index'));
			}else{
				$this -> error('更新失败',U('Order/index'));
			}
		}else{
			$this -> error('失败',U('Order/index'));
		}
	}
	//修改订单
	public function mod(){
		//得到要修改订单的id
		$id = I('get.id');
		$model = M();
		//查询订单表中的一些数据
		$order = $model -> table('xdl_order as o,xdl_user_address as a')
						->field('o.id,o.brand,o.series,o.types,o.combo,o.orderDate,o.orderTime,a.name,a.telephone,a.address')
						-> where("o.id=$id and o.addressId=a.id")
						-> select();
		//查询车型表
		$types = M("models");
		$type = $types -> select();
		//遍历出所有品牌、车型和车系
		foreach($type as $k=>$v){
			$brands[$k] = $v['brand'];
			$series[$k] = $v['brand'].",".$v['series'];
			$Types[$k] = $v['series'].",".$v['types'];
		}
		//移除品牌数组中重复的值
		$brand = array_unique($brands);
		//移除车系数组中重复的值
		$serie = array_unique($series);
		foreach($serie as $k=>$v){
			$serie[$k] = explode(",",$v);
		}
		foreach($Types as $k=>$v){
			$Type[$k] = explode(",",$v);
		}

		//将品牌数组发送到模板
		$this -> assign('Mbrands',$brand);
		//将品牌和车系组合数组发送到模板
		$this -> assign('Mseries',$serie);
		//将车系和车型的组合数组发送到模板
		$this -> assign('Mtypes',$Type);
		//将订单的一些数据发送到模板

		$this -> assign('order',$order);
		$this -> display();
	}
	//更新订单
	public function updateOrder(){
		dump($_POST);
	}
	//取消订单
	public function cancelOrder(){
		$id = I('get.id');
		$order = M('order');
		$data['id'] = $id;
		$data['orderStatus'] = '0';
		if($order -> create($data)){
			if($order -> save()){
				$this -> success('取消成功',U('Order/index'));
			}else{
				$this -> error('取消失败',U('Order/index'));
			}
		}else{
			$this -> error('失败',U('Order/index'));
		}
	}
	//删除订单
	public function del(){
		$id = I('get.id');
		$order = M('order');
		if($order -> delete($id)){
			$this -> success('删除成功',U('Order/cancel'));
		}else{
			$this -> error('删除失败',U('Order/cancel'));
		}
	}
	//更新订单状态
	public function updateStatus(){
		$data['orderStatus'] = (string)$_GET['orderStatus'];
		$data['id'] = $_GET['orderId'];
		$orders = M('order');
		if($orders -> create($data)){
			if($orders -> save()){
				echo 'success';
			}else{
				echo 'error1';
			}
		}else{
			echo 'error2';
		}
	}
}
?>